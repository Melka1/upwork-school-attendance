// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  // url      = env("POSTGRES_URL")
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String   @id @default(uuid()) @map("_id")
  email    String   @unique
  userType UserType
  student  Student?
  teacher  Teacher?
}

model Student {
  id               String       @id @default(uuid()) @map("_id")
  userId           String       @unique
  user             User         @relation(fields: [userId], references: [id])
  name             String
  imageUrl         String?
  email            String       @unique
  phoneNumber      String
  classroom        Classroom    @relation(fields: [classroomId], references: [id])
  classroomId      String
  location         String
  parent           Json
  medicalInfo      String[]
  emergencyContact String[]
  attendance       Attendance[]
}

model Teacher {
  id          String  @id @default(uuid()) @map("_id")
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  name        String
  email       String  @unique
  phoneNumber String
  imageUrl    String?
}

model Attendance {
  id        String           @id @default(uuid()) @map("_id")
  student   Student          @relation(fields: [studentId], references: [id])
  studentId String
  date      Int
  month     Int
  year      Int
  status    AttendanceStatus
  createdAt DateTime         @default(now())
}

model Recipient {
  id             String       @id @default(uuid()) @map("_id")
  email          String
  userType       UserType
  userId         String
  isRead         Boolean      @default(false)
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationId])
}

model Notification {
  id      String      @id @default(uuid()) @map("_id")
  title   String
  message String
  date    DateTime
  users   Recipient[]
}

model Classroom {
  id       String    @id @default(uuid()) @map("_id")
  name     String    @unique
  students Student[]
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  MISSING
}

enum UserType {
  STUDENT
  TEACHER
}
